"use strict";

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareVariable\":[\"id\"],\"ExistentialTypeParam\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumericLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\"],\"ObjectTypeProperty\":[\"key\",\"value\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"UnionTypeAnnotation\":[\"types\"],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"ForAwaitStatement\":[\"left\",\"right\",\"body\"],\"BindExpression\":[\"object\",\"callee\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"RestProperty\":[\"argument\"],\"SpreadProperty\":[\"argument\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Created by suryakanta on 2/2/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         */


var _ava = require("ava");

var _ava2 = _interopRequireDefault(_ava);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let java = require("java");
java.classpath.push("class");
java.classpath.push("gson-2.8.0.jar");
let Main = java.import('com.bazaarvoice.Main');
let main;

_ava2.default.beforeEach(t => {
    main = new Main();
});

_ava2.default.serial('Test case 1 ', t => {
    var _rec = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "text", "sample");
    t.true(_rec._expr(_rec._capt(_rec._capt(res, "arguments/0/left") === 3, "arguments/0"), {
        content: "t.true(res === 3, \"ERROR!!!\")",
        filepath: "test.js",
        line: 20,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":3,\"range\":[15,16]},\"range\":[7,16]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[18,28]}],\"range\":[0,29]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"num\"},\"value\":3,\"range\":[15,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[18,28]},{\"type\":{\"label\":\")\"},\"range\":[28,29]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 2 ', t => {
    var _rec2 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "text", "hello");
    t.true(_rec2._expr(_rec2._capt(_rec2._capt(res, "arguments/0/left") === 0, "arguments/0"), {
        content: "t.true(res === 0, \"ERROR!!!\")",
        filepath: "test.js",
        line: 26,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":0,\"range\":[15,16]},\"range\":[7,16]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[18,28]}],\"range\":[0,29]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"num\"},\"value\":0,\"range\":[15,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[18,28]},{\"type\":{\"label\":\")\"},\"range\":[28,29]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 3 ', t => {
    var _rec3 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "word", "green");
    t.true(_rec3._expr(_rec3._capt(_rec3._capt(res, "arguments/0/left") === 2, "arguments/0"), {
        content: "t.true(res === 2, \"ERROR!!!\")",
        filepath: "test.js",
        line: 32,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":2,\"range\":[15,16]},\"range\":[7,16]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[18,28]}],\"range\":[0,29]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"num\"},\"value\":2,\"range\":[15,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[18,28]},{\"type\":{\"label\":\")\"},\"range\":[28,29]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 4 ', t => {
    var _rec4 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "word", "yellow");
    t.true(_rec4._expr(_rec4._capt(_rec4._capt(res, "arguments/0/left") === 0, "arguments/0"), {
        content: "t.true(res === 0, \"ERROR!!!\")",
        filepath: "test.js",
        line: 38,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":0,\"range\":[15,16]},\"range\":[7,16]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[18,28]}],\"range\":[0,29]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"num\"},\"value\":0,\"range\":[15,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[18,28]},{\"type\":{\"label\":\")\"},\"range\":[28,29]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 5 ', t => {
    var _rec5 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "id", "102");
    t.true(_rec5._expr(_rec5._capt(_rec5._capt(res, "arguments/0/left") === 1, "arguments/0"), {
        content: "t.true(res === 1, \"ERROR!!!\")",
        filepath: "test.js",
        line: 44,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[15,16]},\"range\":[7,16]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[18,28]}],\"range\":[0,29]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[15,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[18,28]},{\"type\":{\"label\":\")\"},\"range\":[28,29]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 6 ', t => {
    var _rec6 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "text", "TEXT");
    t.true(_rec6._expr(_rec6._capt(_rec6._capt(res, "arguments/0/left") === 0, "arguments/0"), {
        content: "t.true(res === 0, \"ERROR!!!\")",
        filepath: "test.js",
        line: 50,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":0,\"range\":[15,16]},\"range\":[7,16]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[18,28]}],\"range\":[0,29]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"num\"},\"value\":0,\"range\":[15,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[18,28]},{\"type\":{\"label\":\")\"},\"range\":[28,29]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 7 ', t => {
    var _rec7 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "", "TEXT");
    t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(res, "arguments/0/left/left") + 1, "arguments/0/left") == 0, "arguments/0"), {
        content: "t.true(res + 1 == 0, \"ERROR!!!\")",
        filepath: "test.js",
        line: 56,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[13,14]},\"range\":[7,14]},\"right\":{\"type\":\"NumericLiteral\",\"value\":0,\"range\":[18,19]},\"range\":[7,19]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[21,31]}],\"range\":[0,32]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"+/-\"},\"value\":\"+\",\"range\":[11,12]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[13,14]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"==\",\"range\":[15,17]},{\"type\":{\"label\":\"num\"},\"value\":0,\"range\":[18,19]},{\"type\":{\"label\":\",\"},\"range\":[19,20]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[21,31]},{\"type\":{\"label\":\")\"},\"range\":[31,32]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});

_ava2.default.serial('Test case 8 ', t => {
    var _rec8 = new _powerAssertRecorder();

    let res = java.callMethodSync(main, "searchResults", "%^&", "TEXT");
    t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(res, "arguments/0/left/left") + 1, "arguments/0/left") == 0, "arguments/0"), {
        content: "t.true(res + 1 == 0, \"ERROR!!!\")",
        filepath: "test.js",
        line: 62,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"res\",\"range\":[7,10]},\"right\":{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[13,14]},\"range\":[7,14]},\"right\":{\"type\":\"NumericLiteral\",\"value\":0,\"range\":[18,19]},\"range\":[7,19]},{\"type\":\"StringLiteral\",\"value\":\"ERROR!!!\",\"range\":[21,31]}],\"range\":[0,32]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"res\",\"range\":[7,10]},{\"type\":{\"label\":\"+/-\"},\"value\":\"+\",\"range\":[11,12]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[13,14]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"==\",\"range\":[15,17]},{\"type\":{\"label\":\"num\"},\"value\":0,\"range\":[18,19]},{\"type\":{\"label\":\",\"},\"range\":[19,20]},{\"type\":{\"label\":\"string\"},\"value\":\"ERROR!!!\",\"range\":[21,31]},{\"type\":{\"label\":\")\"},\"range\":[31,32]}]",
        visitorKeys: _powerAssertVisitorKeys
    }), "ERROR!!!");
});
//# sourceMappingURL=node_modules/.cache/ava/09f07dbb9a9088a045e549f4fe9b1b05.js.map